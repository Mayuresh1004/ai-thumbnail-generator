import OpenAI from "openai";
import "dotenv/config";
import { NextRequest, NextResponse } from "next/server";

const openai = new OpenAI({
  baseURL: "https://openrouter.ai/api/v1",
  apiKey: process.env.OPENROUTER_API_KEY,
});

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { 
      prompt, 
      images = [], 
      model = "google/gemini-2.5-flash-image-preview:free",
      size = "1024x1024",
      aspectRatio = "16:9" // New parameter for aspect ratio
    } = body;

    // Validate required fields
    if (!prompt) {
      return NextResponse.json(
        { error: "Prompt is required" }, 
        { status: 400 }
      );
    }

    if (!process.env.OPENROUTER_API_KEY) {
      return NextResponse.json(
        { error: "OpenRouter API key not configured" }, 
        { status: 500 }
      );
    }

    // Determine size based on aspect ratio
    // DALL-E 3 supported sizes: 1024x1024, 1792x1024, 1024x1792
    let finalSize: "1024x1024" | "1792x1024" | "1024x1792";
    if (aspectRatio === "16:9") {
      finalSize = "1792x1024"; // 16:9 aspect ratio (landscape)
    } else if (aspectRatio === "9:16") {
      finalSize = "1024x1792"; // 9:16 aspect ratio (portrait)
    } else {
      finalSize = "1024x1024"; // Default square
    }
    
    console.log(`Generating thumbnail with aspect ratio: ${aspectRatio}, size: ${finalSize}`);

    let imageUrl;
    let generatedImages = [];

    if (model.includes("gemini") && images.length > 0) {
      // For Gemini models with image input
      try {
        const completion = await openai.chat.completions.create({
          model,
          messages: [
            {
              role: "user",
              content: [
                { 
                  type: "text", 
                  text: `${prompt}\n\nPlease generate a professional YouTube thumbnail based on this description and the provided images. The thumbnail should be eye-catching, high-quality, and optimized for click-through rates.` 
                },
                ...images.map((img: string) => ({
                  type: "image_url",
                  image_url: { 
                    url: img.startsWith('data:') ? img : `data:image/png;base64,${img}`
                  },
                })),
              ],
            },
          ],
          // Add additional parameters for better image generation
          max_tokens: 1024,
          temperature: 0.7,
        });

        // Extract image URL from Gemini response
        const messageContent = completion.choices[0]?.message;
        
        // Check different possible response formats
        if ((messageContent as any)?.images?.[0]?.image_url?.url) {
          imageUrl = (messageContent as any).images[0].image_url.url;
        } else if ((messageContent as any)?.content) {
          // Sometimes the image might be in the content
          const content = (messageContent as any).content;
          if (typeof content === 'string' && content.includes('http')) {
            // Extract URL from content if present
            const urlMatch = content.match(/https?:\/\/[^\s]+/);
            if (urlMatch) {
              imageUrl = urlMatch[0];
            }
          }
        }

        if (!imageUrl) {
          console.warn("No image URL found in Gemini response, trying DALL-E fallback");
          throw new Error("No image generated by Gemini");
        }

      } catch (geminiError) {
        console.error("Gemini generation failed:", geminiError);
        
                          // Fallback to DALL-E 3 if Gemini fails
         console.log("Falling back to DALL-E 3...");
         console.log(`Using DALL-E 3 fallback with size: ${finalSize}`);
         const fallbackResult = await openai.images.generate({
           model: "dall-e-3",
           prompt: `Create a YouTube thumbnail: ${prompt}. Make it vibrant, eye-catching, and professional with bold text overlay space.`,
           size: finalSize,
           quality: "standard",
           n: 1,
         });

         imageUrl = fallbackResult.data?.[0]?.url;
      }
    } else {
      // For models that don't take images or when no images provided
      try {
        console.log(`Using primary model with size: ${finalSize}`);
        // For 9:16 aspect ratio, use DALL-E 3 as it supports 1024x1792
        const modelToUse = (aspectRatio === "9:16") ? "dall-e-3" : (model.includes("google/gemini-2.5-flash-image-preview:free") ? model : "google/gemini-2.5-flash-image-preview:free");
        
        const result = await openai.images.generate({
          model: modelToUse,
          prompt: `Create a YouTube thumbnail: ${prompt}. Make it vibrant, eye-catching, and professional with bold text overlay space.`,
          size: finalSize,
          quality: "standard",
          n: 1,
        });

        imageUrl = result.data?.[0]?.url;
             } catch (geminiError) {
         console.error("Gemini generation failed:", geminiError);
         throw new Error("Failed to generate image with available models");
       }
    }

    if (!imageUrl) {
      return NextResponse.json(
        { error: "No image URL returned from any model" }, 
        { status: 500 }
      );
    }

    // Return the generated image URL
    return NextResponse.json({ 
      url: imageUrl,
      model: model,
      prompt: prompt,
      aspectRatio: aspectRatio,
      success: true
    }, {
      status: 200,
      headers: { "Content-Type": "application/json" },
    });

  } catch (err) {
    console.error("‚ùå Error generating image:", err);
    
    // Provide more specific error messages
    let errorMessage = "Unknown error occurred";
    let statusCode = 500;

    if (err instanceof Error) {
      errorMessage = err.message;
      
      // Handle specific API errors
      if (errorMessage.includes("API key")) {
        statusCode = 401;
        errorMessage = "Invalid API key";
             } else if (errorMessage.includes("quota") || errorMessage.includes("limit") || errorMessage.includes("429")) {
         statusCode = 429;
         errorMessage = "API quota exceeded. Please add credits to your OpenRouter account or try again later.";
      } else if (errorMessage.includes("content policy")) {
        statusCode = 400;
        errorMessage = "Content violates policy. Please modify your prompt.";
      }
    }

    return NextResponse.json(
      { 
        error: errorMessage,
        success: false,
        timestamp: new Date().toISOString()
      }, 
      { status: statusCode }
    );
  }
} 